// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NativeColorPicker should render colors grid with custom props 1`] = `
<RCTScrollView
  data={
    Array [
      "#db643a",
      "#e88334",
      "#d73964",
      "#d23440",
    ]
  }
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  removeClippedSubviews={false}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  testID="colors-grid"
  updateCellsBatchingPeriod={50}
  viewabilityConfigCallbackPairs={Array []}
  windowSize={21}
>
  <View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <View
        style={
          Object {
            "flexDirection": "row",
          }
        }
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "backgroundColor": "#db643a",
              "borderRadius": 22,
              "elevation": 6,
              "height": 44,
              "margin": 11,
              "opacity": 1,
              "shadowColor": "#db643a",
              "shadowOffset": Object {
                "height": 0,
                "width": 0,
              },
              "shadowOpacity": 0.75,
              "shadowRadius": 5,
              "width": 44,
            }
          }
          testID="color-item"
        >
          <BVLinearGradient
            colors={
              Array [
                2582692015,
                0,
              ]
            }
            endPoint={
              Object {
                "x": 0.5,
                "y": 1,
              }
            }
            locations={null}
            startPoint={
              Object {
                "x": 0.5,
                "y": 0,
              }
            }
            style={
              Object {
                "borderRadius": 22,
                "bottom": 0,
                "left": 0,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": -1,
              }
            }
            testID="item-gradient"
          />
        </View>
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "backgroundColor": "#e88334",
              "borderRadius": 22,
              "elevation": 6,
              "height": 44,
              "margin": 11,
              "opacity": 1,
              "shadowColor": "#e88334",
              "shadowOffset": Object {
                "height": 0,
                "width": 0,
              },
              "shadowOpacity": 0.75,
              "shadowRadius": 5,
              "width": 44,
            }
          }
          testID="color-item"
        >
          <BVLinearGradient
            colors={
              Array [
                2583089587,
                0,
              ]
            }
            endPoint={
              Object {
                "x": 0.5,
                "y": 1,
              }
            }
            locations={null}
            startPoint={
              Object {
                "x": 0.5,
                "y": 0,
              }
            }
            style={
              Object {
                "borderRadius": 22,
                "bottom": 0,
                "left": 0,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": -1,
              }
            }
            testID="item-gradient"
          />
        </View>
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "backgroundColor": "#d73964",
              "borderRadius": 22,
              "elevation": 6,
              "height": 44,
              "margin": 11,
              "opacity": 1,
              "shadowColor": "#d73964",
              "shadowOffset": Object {
                "height": 0,
                "width": 0,
              },
              "shadowOpacity": 0.75,
              "shadowRadius": 5,
              "width": 44,
            }
          }
          testID="color-item"
        >
          <BVLinearGradient
            colors={
              Array [
                0,
                2574325551,
              ]
            }
            endPoint={
              Object {
                "x": 0.5,
                "y": 1,
              }
            }
            locations={null}
            startPoint={
              Object {
                "x": 0.5,
                "y": 0,
              }
            }
            style={
              Object {
                "borderRadius": 22,
                "bottom": 0,
                "left": 0,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": -1,
              }
            }
            testID="item-gradient"
          />
        </View>
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "backgroundColor": "#d23440",
              "borderRadius": 22,
              "elevation": 6,
              "height": 44,
              "margin": 11,
              "opacity": 1,
              "shadowColor": "#d23440",
              "shadowOffset": Object {
                "height": 0,
                "width": 0,
              },
              "shadowOpacity": 0.75,
              "shadowRadius": 5,
              "width": 44,
            }
          }
          testID="color-item"
        >
          <BVLinearGradient
            colors={
              Array [
                0,
                2573932574,
              ]
            }
            endPoint={
              Object {
                "x": 0.5,
                "y": 1,
              }
            }
            locations={null}
            startPoint={
              Object {
                "x": 0.5,
                "y": 0,
              }
            }
            style={
              Object {
                "borderRadius": 22,
                "bottom": 0,
                "left": 0,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": -1,
              }
            }
            testID="item-gradient"
          />
        </View>
      </View>
    </View>
  </View>
</RCTScrollView>
`;

exports[`NativeColorPicker should render colors grid with default props 1`] = `
<RCTScrollView
  data={
    Array [
      "#d73964",
      "#d23440",
      "#db643a",
      "#e88334",
    ]
  }
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  removeClippedSubviews={false}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  testID="colors-grid"
  updateCellsBatchingPeriod={50}
  viewabilityConfigCallbackPairs={Array []}
  windowSize={21}
>
  <View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <View
        style={
          Object {
            "flexDirection": "row",
          }
        }
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "backgroundColor": "#d73964",
              "borderRadius": 22,
              "height": 44,
              "margin": 11,
              "opacity": 1,
              "width": 44,
            }
          }
          testID="color-item"
        />
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "backgroundColor": "#d23440",
              "borderRadius": 22,
              "height": 44,
              "margin": 11,
              "opacity": 1,
              "width": 44,
            }
          }
          testID="color-item"
        />
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "backgroundColor": "#db643a",
              "borderRadius": 22,
              "height": 44,
              "margin": 11,
              "opacity": 1,
              "width": 44,
            }
          }
          testID="color-item"
        />
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "backgroundColor": "#e88334",
              "borderRadius": 22,
              "height": 44,
              "margin": 11,
              "opacity": 1,
              "width": 44,
            }
          }
          testID="color-item"
        />
      </View>
    </View>
  </View>
</RCTScrollView>
`;

exports[`NativeColorPicker should render horizontal colors list with fade marker 1`] = `
<RCTScrollView
  data={
    Array [
      "#db643a",
      "#e88334",
      "#d73964",
      "#d23440",
    ]
  }
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={true}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  removeClippedSubviews={false}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  testID="colors-grid"
  updateCellsBatchingPeriod={50}
  viewabilityConfigCallbackPairs={Array []}
  windowSize={21}
>
  <View>
    <View
      onLayout={[Function]}
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          null,
        ]
      }
    >
      <View
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#db643a",
            "borderRadius": 22,
            "height": 44,
            "margin": 11,
            "opacity": 1,
            "width": 44,
          }
        }
        testID="color-item"
      />
    </View>
    <View
      onLayout={[Function]}
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          null,
        ]
      }
    >
      <View
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#e88334",
            "borderRadius": 22,
            "height": 44,
            "margin": 11,
            "opacity": 1,
            "width": 44,
          }
        }
        testID="color-item"
      />
    </View>
    <View
      onLayout={[Function]}
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          null,
        ]
      }
    >
      <View
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#d73964",
            "borderRadius": 22,
            "height": 44,
            "margin": 11,
            "opacity": 1,
            "width": 44,
          }
        }
        testID="color-item"
      />
    </View>
    <View
      onLayout={[Function]}
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          null,
        ]
      }
    >
      <View
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#d23440",
            "borderRadius": 22,
            "height": 44,
            "margin": 11,
            "opacity": 1,
            "width": 44,
          }
        }
        testID="color-item"
      />
    </View>
  </View>
</RCTScrollView>
`;
